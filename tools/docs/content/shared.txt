/*
Variable: body (DOM element)
Get the body of the document.
> this.body

Variable: instance (soma.core.Application)
Retrieves the instance of the framework.
> this.instance

Function: dispatchEvent
Dispatches an event into the framework.

Parameter:
	event (soma.Event) - event instance
> this.dispatchEvent(new soma.Event("eventType")); // generic event
> this.dispatchEvent(new MyEvent("eventType")); // custom event

Function: addEventListener
Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.

Parameter:
	type (string) - The type of event.
	listener (function) - The listener function that processes the event.
	priority (int) - The priority level of the event listener (default: 0).
> this.addEventListener("eventType", this.eventHandler.bind(this));

> function eventHandler(event) {
>     // do something
> }

Function: removeEventListener
Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.

Parameter:
	type (string) - The type of event.
	listener (function) - The listener to remove.
> this.removeEventListener("eventType", this.eventHandler);

Function: hasWire
Indicates whether a wire has been registered to the framework.

*Returns:* a boolean

Parameter:
	wireName (string) - Name of the wire.
> this.hasWire("myWireName");

Function: getWire
Retrieves the wire instance that has been registered using its name.

*Returns:* a wire instance.

Parameter:
	wireName (string) - Name of the wire.
> var myWire = this.getWire("myWireName");

Function: addWire
Registers a wire to the framework.

*Returns:* the wire instance.

Parameter:
	wireName (string) - Name of the wire.
	wire (soma.core.wire.Wire) - A wire instance.
> this.addWire("myWireName", new MyWire());

Function: removeWire
Removes a wire from the framework and call the dispose method of this wire.

Parameter:
	wireName (string) - Name of the wire.
> this.removeWire("myWireName");

Function: hasModel
Indicates whether a model has been registered to the framework.

Parameter:
	modelName (string) - Name of the model.
> this.hasModel("myModelName");

Function: getModel
Retrieves the model instance that has been registered using its name.

*Returns:* a model instance.

Parameter:
	modelName (string) - Name of the model.
> var myModel = this.getModel("myModelName");

Function: addModel
Registers a model to the framework.

*Returns:* the model instance.

Parameter:
	modelName (string) - Name of the model.
	model (soma.core.model.Model) - A model instance'
> this.addModel("myModelName", new Model());

Function: removeModel
Removes a model from the framework and call the dispose method of this model.

Parameter:
	modelName (string) - Name of the model.
> this.removeModel("myModelName");

Function: hasView
Indicates whether a view has been registered to the framework.

*Returns:* a boolean

Parameter:
	viewName (string) - Name of the view.
> this.hasView("myViewName");

Function: getView
Retrieves the view instance that has been registered using its name.

*Returns:* a view instance.

Parameter:
	viewName (string) - Name of the view.
> var myView = this.getView("myViewName");

Function: addView
Registers a view to the framework.

*Returns:* the view instance.

Parameter:
	viewName (string) - Name of the view.
	view (soma.core.view.View) - A view instance.
> this.addView("myViewName", new MyView());

Function: removeView
Removes a view from the framework and call the (optional) dispose method of this view.

Parameter:
	viewName (string) - Name of the view.
> this.removeView("myViewName");

Function: hasCommand
Indicates wether a command has been registered to the framework.

*Returns:* a boolean

Parameter:
	commandName (string) - Event type that is used as a command name.
> this.hasCommand("eventType");

Function: getCommand
Retrieves the command class that has been registered with a command name.

*Returns:* a class

Parameter:
	commandName (string) - Event type that is used as a command name.
var commandClass = this.getCommand("eventType");

Function: getCommands
Retrieves all the command names (event type) that have been registered to the framework.

*Returns:* an array of string

> var commands = this.getCommands();

Function: addCommand
Registers a command to the framework.

Parameter:
	commandName (string) - Event type that is used as a command name.
	command (class) - Class that will be executed when a command has been dispatched.
> this.addCommand("eventType", MyCommand);

Function: removeCommand
Removes a command from the framework.

Parameter:
	commandName (string) - Event type that is used as a command name.
> this.removeCommand("eventType");

Function: getSequencer
Retrieves the sequence command instance using an event instance that has been created from this sequence command.

*Returns:* A sequencer instance

Parameter:
	event (event) - Event instance.
> var sequencer = this.getSequencer(myEvent);

Function: stopSequencerWithEvent
Stops a sequence command using an event instance that has been created from this sequence command.

*Returns:* A boolean

Parameter:
	event (event) - Event instance.
> var success = this.stopSequencerWithEvent(myEvent);

Function: stopSequencer
Stops a sequence command using the sequence command instance itself.

*Returns:* A boolean

Parameter:
	sequencer (sequence) - The sequence command instance.
> var success = this.stopSequencer(mySequenceCommand);

Function: stopAllSequencers
Stops all the sequence command instances that are running.

> this.stopAllSequencers();

Function: isPartOfASequence
Indicates wether an event has been instantiated from a ISequenceCommand class.

*Returns:* A boolean

Parameter:
	event (event) - Event instance.
> var inSequence = this.isPartOfASequence(myEvent);

Function: getLastSequencer
Retrieves the last sequence command that has been instantiated in the framework.

*Returns:* a sequencer command

> var lastSequencer = this.getLastSequencer();

Function: getRunningSequencers
Retrieves all the sequence command instances that are running.

*Returns:* an array of sequencer command
> var sequencers = this.getRunningSequencers();

*/